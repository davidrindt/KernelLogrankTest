```
```{r}
web <- "https://s3.amazonaws.com/udacity-hosted-downloads/ud651/prosperLoanData.csv"
loan <- read.csv(web)
# Remove duplicates by LoanKey
loan_nd <- loan[!duplicated(loan$LoanKey), ]
# removing LoanStatus no needed
sel_status  <- loan_nd$LoanStatus %in% c("Completed", "Current",
"ChargedOff", "Defaulted",
"Cancelled")
loan_filtered <- loan_nd[sel_status, ]
# creating status variable for censoring
loan_filtered$status <- ifelse(
loan_filtered$LoanStatus == "Defaulted" |
loan_filtered$LoanStatus == "Chargedoff",  1, 0)
# adding the final date to "current" status
head(levels(loan_filtered$ClosedDate))
## [1] ""                    "2005-11-25 00:00:00" "2005-11-29 00:00:00"
## [4] "2005-11-30 00:00:00" "2005-12-08 00:00:00" "2005-12-28 00:00:00"
levels(loan_filtered$ClosedDate)[1] <- "2014-11-03 00:00:00"
# creating the time-to-event variable
loan_filtered$start <- as.Date(loan_filtered$LoanOriginationDate)
loan_filtered$end <- as.Date(loan_filtered$ClosedDate)
loan_filtered$time <- as.numeric(difftime(loan_filtered$end, loan_filtered$start, units = "days"))
# there is an error in the data (time to event less than 0)
loan_filtered <- loan_filtered[-loan_filtered$time < 0, ]
# just considering a year of loans creation
ii <- format(as.Date(loan_filtered$LoanOriginationDate),'%Y') %in% c("2006")
loan_filtered <- loan_filtered[ii, ]
loan_filtered$LoanOriginalAmount2 <-  loan_filtered$LoanOriginalAmount/10000
loan_data_2006_cleaned <- loan_filtered
write.csv(to_save_data, 'loan_data_2006_cleaned')
```
```{r}
describe(loan_data_2006_cleaned)
```
```{r}
print(sum(!complete.cases(loan_data_2006[,"BorrowerState"])))
```
```{r}
# print(colSums(is.na(loan_data_2006)))
loan_data_2006 = loan_data_2006_cleaned[, colSums(is.na(loan_data_2006_cleaned)) == 0]
# loan_data_2006 = loan_data_2006[, colSums(is.na(loan_data_2006)) == 0]
print(colSums(loan_data_2006 == '') == 0)
```
```{r}
subset_data = loan_data_2006[, c("IsBorrowerHomeowner", "LoanOriginalAmount2", 'time', 'status')]
```
```{r}
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2, df=3), data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
attributes(ptemp)
```
Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Ctrl+Alt+I*.
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2, df=3), data=subset_data)
mfit
termplot(mfit, term=1, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
attributes(ptemp)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2, df=3), data=subset_data)
mfit
termplot(mfit, term=1, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
attributes(ptemp)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2, df=3), data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
attributes(ptemp)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2, df=3), data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
km_trt_fit <- survfit(Surv(time, status) ~ IsBorrowerHomeowner, data=subset_data)
autoplot(km_trt_fit)
View(loan)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2, data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2, data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2, data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2, data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2,2) , data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
km_trt_fit <- survfit(Surv(time, status) ~ IsBorrowerHomeowner, data=subset_data[sample(nrow(subset_data, 1000))])
km_trt_fit <- survfit(Surv(time, status) ~ IsBorrowerHomeowner, data=subset_data[sample(nrow(subset_data), 1000)])
km_trt_fit <- survfit(Surv(time, status) ~ IsBorrowerHomeowner, data=subset_data[sample(nrow(subset_data), 1000),])
autoplot(km_trt_fit)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2,2) , data=data=subset_data[sample(nrow(subset_data), 1000),])
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2,2) , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2,2) , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2,1) , data=subset_data[sample(nrow(subset_data), 1000),])
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2,2) , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
<h1> Hey </h1>
---
title: "R Notebook"
output: html_notebook
---
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Ctrl+Shift+Enter*.
```{r}
library(survival)
# library(condSURV)
# library(JM)
# library(dplyr)
# library(survminer)
# library(clustcurv)
library(psych)
library(ggplot2)
```
This downloads the data, and edits it a bit. In partifcular loan status is transformed, variables are turned into dates, the year 2006 is selected etc. This is from an online course on survival data.
```{r}
web <- "https://s3.amazonaws.com/udacity-hosted-downloads/ud651/prosperLoanData.csv"
loan <- read.csv(web)
# Remove duplicates by LoanKey
loan_nd <- loan[!duplicated(loan$LoanKey), ]
# removing LoanStatus no needed
sel_status  <- loan_nd$LoanStatus %in% c("Completed", "Current",
"ChargedOff", "Defaulted",
"Cancelled")
loan_filtered <- loan_nd[sel_status, ]
# creating status variable for censoring
loan_filtered$status <- ifelse(
loan_filtered$LoanStatus == "Defaulted" |
loan_filtered$LoanStatus == "Chargedoff",  1, 0)
# adding the final date to "current" status
head(levels(loan_filtered$ClosedDate))
## [1] ""                    "2005-11-25 00:00:00" "2005-11-29 00:00:00"
## [4] "2005-11-30 00:00:00" "2005-12-08 00:00:00" "2005-12-28 00:00:00"
levels(loan_filtered$ClosedDate)[1] <- "2014-11-03 00:00:00"
# creating the time-to-event variable
loan_filtered$start <- as.Date(loan_filtered$LoanOriginationDate)
loan_filtered$end <- as.Date(loan_filtered$ClosedDate)
loan_filtered$time <- as.numeric(difftime(loan_filtered$end, loan_filtered$start, units = "days"))
# there is an error in the data (time to event less than 0)
loan_filtered <- loan_filtered[-loan_filtered$time < 0, ]
# just considering a year of loans creation
ii <- format(as.Date(loan_filtered$LoanOriginationDate),'%Y') %in% c("2006")
loan_filtered <- loan_filtered[ii, ]
loan_filtered$LoanOriginalAmount2 <-  loan_filtered$LoanOriginalAmount/10000
loan_data_2006_cleaned <- loan_filtered
write.csv(to_save_data, 'loan_data_2006_cleaned')
```
```{r}
describe(loan_data_2006_cleaned)
```
I did not really analyse the entire dataset much. You'd have to filter it quite carefully. Many NA's are present. Also many ' ' empty strings are present.
```{r}
print(sum(!complete.cases(loan_data_2006[,"BorrowerState"])))
```
```{r}
# print(colSums(is.na(loan_data_2006)))
loan_data_2006 = loan_data_2006_cleaned[, colSums(is.na(loan_data_2006_cleaned)) == 0]
# loan_data_2006 = loan_data_2006[, colSums(is.na(loan_data_2006)) == 0]
print(colSums(loan_data_2006 == '') == 0)
```
Select the subset of the data:
```{r}
subset_data = loan_data_2006[, c("IsBorrowerHomeowner", "LoanOriginalAmount2", 'time', 'status')]
```
Fit a cox model without including spline terms:
```{r}
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2, data=subset_data)
mfit
```
Including spline terms.
```{r}
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2,2) , data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
```
```{r}
km_trt_fit <- survfit(Surv(time, status) ~ IsBorrowerHomeowner, data=subset_data)
autoplot(km_trt_fit)
```
```{r}
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
```
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Ctrl+Shift+K* to preview the HTML file).
The preview shows you a rendered HTML copy of the contents of the editor. Consequently, unlike *Knit*, *Preview* does not run any R code chunks. Instead, the output of the chunk when it was last run in the editor is displayed.
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2, data=subset_data)
mfit
web <- "https://s3.amazonaws.com/udacity-hosted-downloads/ud651/prosperLoanData.csv"
loan <- read.csv(web)
# Remove duplicates by LoanKey
loan_nd <- loan[!duplicated(loan$LoanKey), ]
# removing LoanStatus no needed
sel_status  <- loan_nd$LoanStatus %in% c("Completed", "Current",
"ChargedOff", "Defaulted",
"Cancelled")
loan_filtered <- loan_nd[sel_status, ]
# creating status variable for censoring
loan_filtered$status <- ifelse(
loan_filtered$LoanStatus == "Defaulted" |
loan_filtered$LoanStatus == "Chargedoff",  1, 0)
# adding the final date to "current" status
head(levels(loan_filtered$ClosedDate))
## [1] ""                    "2005-11-25 00:00:00" "2005-11-29 00:00:00"
## [4] "2005-11-30 00:00:00" "2005-12-08 00:00:00" "2005-12-28 00:00:00"
levels(loan_filtered$ClosedDate)[1] <- "2014-11-03 00:00:00"
# creating the time-to-event variable
loan_filtered$start <- as.Date(loan_filtered$LoanOriginationDate)
loan_filtered$end <- as.Date(loan_filtered$ClosedDate)
loan_filtered$time <- as.numeric(difftime(loan_filtered$end, loan_filtered$start, units = "days"))
# there is an error in the data (time to event less than 0)
loan_filtered <- loan_filtered[-loan_filtered$time < 0, ]
# just considering a year of loans creation
ii <- format(as.Date(loan_filtered$LoanOriginationDate),'%Y') %in% c("2006")
loan_filtered <- loan_filtered[ii, ]
loan_filtered$LA <-  loan_filtered$LoanOriginalAmount/10000
loan_data_2006_cleaned <- loan_filtered
write.csv(to_save_data, 'loan_data_2006_cleaned')
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2,3) , data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2,4) , data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2,10) , data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2,3) , data=subset_data)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2,3) , data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
print(mfit$pterms)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
print(mfit$score)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
print(mfit$like)
print(mfit$loglik)
surv_pvalue(mfit)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
surv_pvalue(mfit)
mfit$coefficients
mfit$var
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit$coefficients
mfit$var
mfit$iter
mfit$score
summary(mfit)$coefficients
p_value(mfit)
summary(mfit)$pvalue
summary(mfit)$likelihood_ratio_test
a= summary(mfit)
View(a)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit$coefficients
mfit$var
mfit$iter
mfit$score
p_value(mfit)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit$coefficients
mfit$var
mfit$iter
mfit$score
p_value(mfit)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit$coefficients
mfit$var
mfit$iter
mfit$score
a= summary(mfit)
print(a)
View(a)
print(a$sctest[3])
print(a$sctest[3]['pvalue'])
print(a$sctest[3][0,'pvalue'])
print(a$sctest[3]['pvalue'][0])
print(a$sctest[3]['pvalue'])
print(a$sctest[3]['pvalue']+2)
print(p_value_sum/100)
p_value_sum = 0
for (i in 0:100){
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
p_value = summary(mfit)$sctest['pvalue']
p_value_sum = p_value_sum + p_value
}
print(p_value_sum/100)
library(survival)
# library(condSURV)
# library(JM)
# library(dplyr)
# library(survminer)
# library(clustcurv)
library(psych)
library(ggplot2)
web <- "https://s3.amazonaws.com/udacity-hosted-downloads/ud651/prosperLoanData.csv"
loan <- read.csv(web)
# Remove duplicates by LoanKey
loan_nd <- loan[!duplicated(loan$LoanKey), ]
# removing LoanStatus no needed
sel_status  <- loan_nd$LoanStatus %in% c("Completed", "Current",
"ChargedOff", "Defaulted",
"Cancelled")
loan_filtered <- loan_nd[sel_status, ]
# creating status variable for censoring
loan_filtered$status <- ifelse(
loan_filtered$LoanStatus == "Defaulted" |
loan_filtered$LoanStatus == "Chargedoff",  1, 0)
# adding the final date to "current" status
head(levels(loan_filtered$ClosedDate))
## [1] ""                    "2005-11-25 00:00:00" "2005-11-29 00:00:00"
## [4] "2005-11-30 00:00:00" "2005-12-08 00:00:00" "2005-12-28 00:00:00"
levels(loan_filtered$ClosedDate)[1] <- "2014-11-03 00:00:00"
# creating the time-to-event variable
loan_filtered$start <- as.Date(loan_filtered$LoanOriginationDate)
loan_filtered$end <- as.Date(loan_filtered$ClosedDate)
loan_filtered$time <- as.numeric(difftime(loan_filtered$end, loan_filtered$start, units = "days"))
# there is an error in the data (time to event less than 0)
loan_filtered <- loan_filtered[-loan_filtered$time < 0, ]
# just considering a year of loans creation
ii <- format(as.Date(loan_filtered$LoanOriginationDate),'%Y') %in% c("2006")
loan_filtered <- loan_filtered[ii, ]
loan_filtered$LA <-  loan_filtered$LoanOriginalAmount/10000
loan_data_2006_cleaned <- loan_filtered
write.csv(to_save_data, 'loan_data_2006_cleaned')
describe(loan_data_2006_cleaned)
# print(sum(!complete.cases(loan_data_2006[,"BorrowerState"])))
# # print(colSums(is.na(loan_data_2006)))
# loan_data_2006 = loan_data_2006_cleaned[, colSums(is.na(loan_data_2006_cleaned)) == 0]
# # loan_data_2006 = loan_data_2006[, colSums(is.na(loan_data_2006)) == 0]
# print(colSums(loan_data_2006 == '') == 0)
subset_data = loan_data_2006[, c("IsBorrowerHomeowner", "LoanOriginalAmount2", 'time', 'status')]
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2, data=subset_data)
mfit
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + pspline(LoanOriginalAmount2, 3) , data=subset_data)
mfit
termplot(mfit, term=2, se=TRUE, col.term=1, col.se=1)
ptemp <- termplot(mfit, se=TRUE, plot=FALSE)
km_trt_fit <- survfit(Surv(time, status) ~ IsBorrowerHomeowner, data=subset_data)
autoplot(km_trt_fit)
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
mfit
mfit$coefficients
mfit$var
mfit$iter
mfit$score
a= summary(mfit)
print(a$sctest[3]['pvalue']+2)
p_value_sum = 0
for (i in 0:100){
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2 , data=subset_data[sample(nrow(subset_data), 1000),])
p_value = summary(mfit)$sctest['pvalue']
p_value_sum = p_value_sum + p_value
}
print(p_value_sum/100)
library(survival)
# library(condSURV)
# library(JM)
# library(dplyr)
# library(survminer)
# library(clustcurv)
library(psych)
library(ggplot2)
web <- "https://s3.amazonaws.com/udacity-hosted-downloads/ud651/prosperLoanData.csv"
loan <- read.csv(web)
# Remove duplicates by LoanKey
loan_nd <- loan[!duplicated(loan$LoanKey), ]
# removing LoanStatus no needed
sel_status  <- loan_nd$LoanStatus %in% c("Completed", "Current",
"ChargedOff", "Defaulted",
"Cancelled")
loan_filtered <- loan_nd[sel_status, ]
# creating status variable for censoring
loan_filtered$status <- ifelse(
loan_filtered$LoanStatus == "Defaulted" |
loan_filtered$LoanStatus == "Chargedoff",  1, 0)
# adding the final date to "current" status
head(levels(loan_filtered$ClosedDate))
## [1] ""                    "2005-11-25 00:00:00" "2005-11-29 00:00:00"
## [4] "2005-11-30 00:00:00" "2005-12-08 00:00:00" "2005-12-28 00:00:00"
levels(loan_filtered$ClosedDate)[1] <- "2014-11-03 00:00:00"
# creating the time-to-event variable
loan_filtered$start <- as.Date(loan_filtered$LoanOriginationDate)
loan_filtered$end <- as.Date(loan_filtered$ClosedDate)
loan_filtered$time <- as.numeric(difftime(loan_filtered$end, loan_filtered$start, units = "days"))
# there is an error in the data (time to event less than 0)
loan_filtered <- loan_filtered[-loan_filtered$time < 0, ]
# just considering a year of loans creation
ii <- format(as.Date(loan_filtered$LoanOriginationDate),'%Y') %in% c("2006")
loan_filtered <- loan_filtered[ii, ]
loan_filtered$LoanoriginalAmount2 <-  loan_filtered$LoanOriginalAmount/10000
# write.csv(to_save_data, 'loan_data_2006_cleaned')
describe(loan_filtered)
# print(sum(!complete.cases(loan_data_2006[,"BorrowerState"])))
# # print(colSums(is.na(loan_data_2006)))
# loan_data_2006 = loan_data_2006_cleaned[, colSums(is.na(loan_data_2006_cleaned)) == 0]
# # loan_data_2006 = loan_data_2006[, colSums(is.na(loan_data_2006)) == 0]
# print(colSums(loan_data_2006 == '') == 0)
subset_data = loan_filtered[, c("IsBorrowerHomeowner", "LoanoriginalAmount2", 'time', 'status')]
mfit <- coxph(Surv(time, status) ~ IsBorrowerHomeowner + LoanOriginalAmount2, data=subset_data)
km_trt_fit <- survfit(Surv(time, status) ~ IsBorrowerHomeowner, data=subset_data)
autoplot(km_trt_fit)
web <- "https://s3.amazonaws.com/udacity-hosted-downloads/ud651/prosperLoanData.csv"
loan <- read.csv(web)
# Remove duplicates by LoanKey
loan_nd <- loan[!duplicated(loan$LoanKey), ]
# removing LoanStatus no needed
sel_status  <- loan_nd$LoanStatus %in% c("Completed", "Current",
"ChargedOff", "Defaulted",
"Cancelled")
loan_filtered <- loan_nd[sel_status, ]
# creating status variable for censoring
loan_filtered$status <- ifelse(
loan_filtered$LoanStatus == "Defaulted" |
loan_filtered$LoanStatus == "Chargedoff",  1, 0)
# adding the final date to "current" status
head(levels(loan_filtered$ClosedDate))
## [1] ""                    "2005-11-25 00:00:00" "2005-11-29 00:00:00"
## [4] "2005-11-30 00:00:00" "2005-12-08 00:00:00" "2005-12-28 00:00:00"
levels(loan_filtered$ClosedDate)[1] <- "2014-11-03 00:00:00"
# creating the time-to-event variable
loan_filtered$start <- as.Date(loan_filtered$LoanOriginationDate)
loan_filtered$end <- as.Date(loan_filtered$ClosedDate)
loan_filtered$time <- as.numeric(difftime(loan_filtered$end, loan_filtered$start, units = "days"))
# there is an error in the data (time to event less than 0)
loan_filtered <- loan_filtered[-loan_filtered$time < 0, ]
# just considering a year of loans creation
ii <- format(as.Date(loan_filtered$LoanOriginationDate),'%Y') %in% c("2006")
loan_filtered <- loan_filtered[ii, ]
loan_filtered$LoanOriginalAmount2 <-  loan_filtered$LoanOriginalAmount/10000
write.csv(loan_filtered, 'loan_data_2006_cleaned')
